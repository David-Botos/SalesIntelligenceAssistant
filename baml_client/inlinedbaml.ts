/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.81.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "markdown.baml": "class DocumentMetadata {\n  title string @description(\"The main title of the document\")\n  sourceUrl string? @description(\"Source URL if present\")\n}\n\nclass MarkdownSection {\n  title string @description(\"The heading/title for this section\")\n  level int @description(\"The heading level (1-6)\")\n  content string @description(\"The content text under this heading\")\n  subsections MarkdownSection[] @description(\"Any nested subsections under this heading\")\n}\n\nclass DocumentStructure {\n  metadata DocumentMetadata\n  sections MarkdownSection[] @description(\"Top-level sections of the document\")\n}\n\nfunction ExtractDocumentStructure(rawText: string) -> DocumentStructure {\n  client \"anthropic/claude-3-5-sonnet-latest\"\n  prompt #\"\n    You are a documentation structure analyzer. Given text content (likely from a documentation page),\n    extract the document's structure including metadata and hierarchical sections.\n\n    Follow these guidelines:\n    - Extract the title and source URL if present at the start\n    - Identify main sections and their subsections\n    - Preserve the hierarchical relationship between sections\n    - Include relevant content under each section\n    - Clean up any artifacts from web scraping or text extraction\n    - Ignore navigation elements or non-content sections (like \"Edit on GitHub\")\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ rawText }}\n  \"#\n}\n\ntest BasicDocsTest {\n  functions [ExtractDocumentStructure]\n  args {\n    rawText #\"\n      Title: Getting Started Guide\n      URL Source: https://example.com/docs/getting-started\n\n      Introduction\n      This guide will help you get started with our platform.\n\n      Installation\n      Follow these steps to install:\n      1. Download the package\n      2. Run setup wizard\n\n      Configuration\n      Basic configuration involves:\n      - Setting API keys\n      - Choosing preferences\n    \"#\n  }\n}\n\ntest TechnicalDocsTest {\n  functions [ExtractDocumentStructure]\n  args {\n    rawText #\"\n      Title: HSDS Reference Guide\n      URL Source: https://docs.openreferral.org/en/latest/\n\n      About HSDS\n      The Human Services Data Specification defines core objects and relationships.\n\n      Core Objects\n      Organizations\n      - Name and description\n      - Contact information\n\n      Services\n      - Service types\n      - Eligibility rules\n\n      Locations\n      - Physical addresses\n      - Service areas\n    \"#\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}